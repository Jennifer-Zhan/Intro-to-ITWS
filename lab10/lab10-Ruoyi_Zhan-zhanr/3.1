3.1
void insert(Node* head, int val, bool new_clump, Node* parent){
	if(!head){
		head=new Node(val);
		if(new_clump){
			head->clump_parent=parent;

		}
		else{
			head->clump_parent=parent->clump_parent;
		}
	}

	else if(val<head->value&&head->clump_left==NULL){
		return insert(head->left, val, new_clump, head);
	}

	else if(val<head->value&&head->left==NULL){
		return insert(head->clump_left, val, new_clump, head);
	}


	else if(val>head->value&&head->clump_right==NULL){
		return insert(head->right,val, new_clump, head);
	}

	else if(val>head_value&&head->right==NULL){
		return insert(head->clump_right,val,new_clump,head);
	}
}


3.2

int ClumpUpHeight(Node* p){
	if(p->clump_parent==NULL){
		return 1;
	}

	return ClumpUpHeight(p->clump_parent)+1;
}


3.3

Node* findClumpRoot(Node* root, Node* ptr){
	Node* p=ptr->clump_parent;
	if(ptr->value>p){
		p=p->right;
	}

	else{
		p=p->left;
	}
	return p;
}


3.4
insert(): O(h) The worst case of insert() is to go down to the lower level of the tree which is the height of the tree. 
ClumpUpHeight(): O(c) The worst case of ClumpUpHeight() is to go through all the clump and reach the clump belonging to the root.
findClumpRoot()ï¼š O(1) To find the clump root, we just need to get ptr's clump_parent and get its left node or right node which is O(1).


